---
title: "HW 5"
author: "Gerard Duncan"
format: docx
editor: visual
---
---

title: "HW 5"

author: "Gerard"

format: docx

editor: visual

---


---

title: "Homework 5 - Advanced Data in R"

format: docx

---


```{r}

#| include: false

library(gapminder)

data(gapminder)



library(ggplot2)

library(cowplot)

theme_set(theme_cowplot())



library(dplyr)

library(tidyr)

```




Fill out [this Quarto document](https://github.com/BIFX552-22/CourseInfo/hw/05advanced_data.qmd) while completing the lesson on writing data, `dplyr` and `tidyr`.



### [Writing Data](https://swcarpentry.github.io/r-novice-gapminder/11-writing-data/index.html)



::: callout-tip

## Key Points



-   Save plots from RStudio using the 'Export' button.



-   Use `write.table` to save tabular data.

:::



#### Challenge 1



Modify the code below to print a second page in the pdf, showing a facet plot (hint: use `facet_grid`) of the same data with one panel per continent.




```{r}

pdf("Life_Exp_vs_time.pdf", width=12, height=4)

p <- ggplot(gapminder, aes(year, lifeExp, color=country)) +

  geom_line() +

  theme(legend.position = "none")



# You then have to make sure to turn off the pdf device!



#page 2

ggplot(gapminder, aes(year, lifeExp, color = country)) +

    geom_line() +

    theme(legend.position = "none") +

    facet_grid(~ continent)







dev.off()



p

```




#### Challenge 2



Write a data-cleaning script file that subsets the gapminder data to include only data points collected since 1990.



Use this script to write out the new subset to a file in the `cleaned-data/` directory.




```{r}

# insert code here

datsub <- gapminder[gapminder$year >= 1990,]



write.csv(datsub)



#to end early

head(datsub)

```




### [Data frames with `dplyr`](https://swcarpentry.github.io/r-novice-gapminder/13-dplyr/index.html)



::: callout-tip

## Key Points



-   Use the `dplyr` package to manipulate data frames.

-   Use `select()` to choose variables from a data frame.

-   Use `filter()` to choose data based on values.

-   Use `group_by()` and `summarize()` to work with subsets of data.

-   Use `mutate()` to create new variables.

:::






```{r}

gapminder %>%

    select(year, continent, country, gdpPercap) %>%

    

  rename(gdp_per_capita = gdpPercap) %>%

  

  filter(continent == 'Europe' & year == 2007)

```




#### Challenge 1



Write a single command (which can span multiple lines and includes pipes) that will produce a data frame that has the African values for `lifeExp`, `country` and `year`, but not for other Continents. How many rows does your data frame have and why?




```{r}

# insert code here

A <- filter(gapminder, continent == 'Africa') %>%

    select(lifeExp, country, year)



str(A)

```




#### Challenge 2



Calculate the average life expectancy per country. Which has the longest average life expectancy and which has the shortest average life expectancy?




```{r}

# insert code here

str(gapminder)



group_by(gapminder, continent) %>%

    summarize(mean_gdpPercap = mean(gdpPercap))

```


```{r}

gap_sum <- gapminder %>%
    group_by(country) %>%
    summarize(ave_lifeExp == mean(ave_lifeExp))



#minimum average life expectancy

filter(gap_sum, ave_lifeExp == min(ave_lifeExp))



#maximum average life expectancy

filter(gap_sum, ave_lifeExp == max(ave_lifeExp))



```












#### Challenge 3



Calculate the average life expectancy in 2002 of 2 randomly selected countries for each continent. Then arrange the continent names in reverse order. **Hint:** Use the `dplyr` functions `arrange()` and `sample_n()`, they have similar syntax to other dplyr functions.




```{r}

# insert code here

set.seed(234876)

gapminder %>%

    filter(year == 2002) %>%

    group_by(continent) %>%

    sample_n(2) %>%

    summarize(mean_lifeExp = mean(lifeExp)) %>%

    arrange(desc(mean_lifeExp))

```




### [Data frames with `tidyr`](https://swcarpentry.github.io/r-novice-gapminder/14-tidyr/index.html)



::: callout-tip

## Key Points



-   Use the `tidyr` package to change the layout of data frames.



-   Use `pivot_longer()` to go from wide to longer layout.



-   Use `pivot_wider()` to go from long to wider layout.

:::



#### Challenge 1



Is gapminder a purely long, purely wide, or some intermediate format?



#### gap_wide vs gap_long vs gapminder



The `gap_wide` data set is formatted such that there is only one row per country.




```{r}

library(readr)

gap_wide <- read_csv('https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_wide.csv')



gap_wide

```




The `gap_long` data set is formatted such that there is one row per data point.




```{r}

gap_long <- gap_wide %>%

  pivot_longer(

    cols = c(starts_with('pop'), 

             starts_with('lifeExp'),

             starts_with('gdpPercap')),

    names_to = "obstype_year", 

    values_to = "obs_values") %>%

    

    separate(obstype_year, into = c('obstype', 'year'), sep = '_')



gap_long

```




Both formats cover the extreme ends of the spectrum of how we could format this in a tidy way. The intermediate format provided by `data(gapminder)` is probably more useful in most situations.




```{r}

gapminder

```




#### Challenge 2



Using `gap_long`, calculate the mean life expectancy, population, and gdpPercap for each continent. **Hint:** use the `group_by()` and `summarize()` functions we learned in the `dplyr` lesson




```{r}

# insert code here

group_by(gap_long, continent, obstype) %>%

    summarize(means = mean(obs_values))

```




#### Challenge 3



Create a `gap_ludicrously_wide` format data by pivoting over countries, year and the 3 metrics? **Hint** this new data frame should only have 5 rows.




```{r}

# insert code here

gap_long %>%

    unite(id_var, country, obstype, year, sep = '_') %>%

    pivot_wider(names_from = id_var, values_from = obs_values)

```
