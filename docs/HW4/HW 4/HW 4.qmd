---
title: "HW 4"
---

\-\--

title: "Homework 4 - Graphics, Vectorization, and Functions in R"

format: docx

\-\--

\`\`\`{r}

#\| include: false

library(gapminder)

data(gapminder)

\`\`\`

Fill out \[this Quarto document\](https://github.com/BIFX552-22/CourseInfo/hw/04graphics_vectorization_functions.qmd) while completing the lesson on graphics, vectorization and functions in R.

\### \[R Graphics\](https://swcarpentry.github.io/r-novice-gapminder/08-plot-ggplot2/index.html)

::: callout-tip
\## Key Points

\- Use ggplot2 to create plots.

\- Think about graphics in layers: aesthetics, geometry, statistics, scale transformation, and grouping.
:::

\#### Challenge 1

Modify the example so that the figure shows how life expectancy has changed over time:

\`\`\`{r}

ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point()

\`\`\`

\#### Challenge 2

In the previous examples and challenge we've used the \`aes\` function to tell the scatterplot \*\*geom\*\* about the \*\*x\*\* and \*\*y\*\* locations of each point. Another \*aesthetic\* property we can modify is the point \*color\*. Modify the code from the previous challenge to \*\*color\*\* the points by the "continent" column. What trends do you see in the data? Are they what you expected?

\`\`\`{r}

\# you code goes here

\`\`\`

\#### Challenge 3

Here is a demonstration of drawing points \*on top of\* lines.

\`\`\`{r}

ggplot(data = gapminder, mapping = aes(x=year, y=lifeExp, by=country)) +

geom_line(mapping = aes(color=continent)) + geom_point()

\`\`\`

Switch the order of the point and line layers from the previous example. What happened?

\`\`\`{r}

\# Your code goes here

\`\`\`

\#### Challenge 4

We can fit a simple relationship to the data by adding another layer, \`geom_smooth\`:

\`\`\`{r}

ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +

geom_point(alpha = 0.5) + scale_x\_log10() + geom_smooth(method="lm", size=1.5)

\`\`\`

Modify the color and size of the points on the point layer in the previous example.

Hint: do not use the \`aes\` function.

\`\`\`{r}

\# Your code goes here

\`\`\`

Modify your solution above so that the points are now a different shape and are colored by continent with new trendlines. Hint: The \*\*color\*\* argument can be used inside the aesthetic.

\`\`\`{r}

\# Your code goes here

\`\`\`

\#### Challenge 5

1\. Generate boxplots to compare life expectancy between the different continents during the available years.

2\. Rename y axis as Life Expectancy.

3\. Remove x axis labels.

\`\`\`{r}

\# your code goes here

\`\`\`

\### \[Vectorization\](https://swcarpentry.github.io/r-novice-gapminder/09-vectorization/index.html)

::: callout-tip
\## Key Points

\- Use vectroized options instead of loops
:::

\#### Challenge 1

Make a new column in the \`gapminder\` data frame that contains population in units of millions of people. Check the head or tail of the data frame to make sure it worked.

\`\`\`{r}

\# your code goes here

\`\`\`

\#### Challenge 2

On a single graph, plot population, in millions, against year, for all countries. Do not worry about identifying which country is which.

\`\`\`{r}

\# your code goes here

\`\`\`

Repeat the exercise, graphing only for China, India, and Indonesia. Again, do not worry about which is which.

\`\`\`{r}

\# your code goes here

\`\`\`

\#### Challenge 3

Given the following matrix:

\`\`\`{r}

m \<- matrix(1:12, nrow=3, ncol=4)

m

\`\`\`

Write down what you think will happen when you run:

\* \`m \^ -1\`

\* \`m \* c(1, 0, -1)\`

\* \`m \> c(0, 20)\`

\* \`m \* c(1, 0, -1, 2)\`

Did you get the output you expected? If not, let's discuss in class.

\#### Challenge 4

We're interested in looking at the sum of the following sequence of fractions:

\`\`\`

x = 1/(1\^2) + 1/(2\^2) + 1/(3\^2) + ... + 1/(n\^2)

\`\`\`

This would be tedious to type out, and impossible for high values of \$n\$. Use vectorisation to compute \$x\$ when \$n=100\$.

\`\`\`{r}

\# your code goes here

\`\`\`

What is the sum when \$n=10,000\$?

\`\`\`{r}

\# your code goes here

\`\`\`

\### \[Functions\](https://swcarpentry.github.io/r-novice-gapminder/10-functions/index.html)

::: callout-tip
\## Key Points

\- Use function to define a new function in R.

\- Use parameters to pass values into functions.

\- Use stopifnot() to flexibly check function arguments in R.

\- Load functions into programs using source().
:::

\#### Challenge 1

Write a function called \`kelvin_to_celsius()\` that takes a temperature in Kelvin and returns that temperature in Celsius.

Hint: To convert from Kelvin to Celsius you subtract 273.15

\`\`\`{r}

\# your code goes here

\`\`\`

\#### Challenge 2

Convert Fahrenheit to Celsius:

\`\`\`{r}

fahr_to_kelvin \<- function(temp) {

kelvin \<- ((temp - 32) \* (5 / 9)) + 273.15

return(kelvin)

}

\`\`\`

Define the function to convert directly from Fahrenheit to Celsius, by reusing your function, \`kelvin_to_celsius()\`, and the function above.

\`\`\`{r}

\# your code goes here

\`\`\`

\#### Challenge 3

Use defensive programming to ensure that our \`fahr_to_celsius()\` function throws an error immediately if the argument temp is specified inappropriately.

\`\`\`{r}

\# your code goes here

\`\`\`

\#### Challenge 4

The \`paste()\` function can be used to combine text together, e.g:

\`\`\`{r}

best_practice \<- c("Write", "programs", "for", "people", "not", "computers")

paste(best_practice, collapse=" ")

\`\`\`

Write a function called \`fence()\` that takes two vectors as arguments, called \`text\` and \`wrapper\`, and prints out the text wrapped with the wrapper. For example, \`fence(text=best_practice, wrapper="\*\*\*")\` should give the following result:

\`\`\`

"\*\*\* Write programs for people not computers \*\*\*"

\`\`\`

\`\`\`{r}

\# Your code goes here

\# check to make sure your code works:

fence(text=best_practice, wrapper="\*\*\*")

\`\`\`

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

```{r}
1 + 1
```
