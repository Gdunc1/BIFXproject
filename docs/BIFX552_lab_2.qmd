---
title: "Lab 2"
author: "Gerard Duncan"
format:
  html:
    theme:
      light: flatly
      dark: darkly 
editor: visual
---


```{r}
#Libraries
library(datasets)
library(dplyr)
```



```{r}
data(iris)
summary(iris)
``` 


```{r}
#/ code-fold: true
#/ code-summary: "Show the code"
# filter() the data for species virginica
virginica <- filter(iris, Species == "virginica")
head(virginica) # This dispalys the first six rows
```


```{r}
#/ code-fold: true
#/ code-summary: "Show the code"
sepalLength6 <- filter(iris, Species == "virginica", Sepal.Length > 6)
tail(sepalLength6) # compare this to head()
```


```{r}
#/ code-fold: true
#/ code-summary: "Show the code"
# select() the specified columns
selected <- select(iris, Sepal.Length, Sepal.Width, Petal.Length)
# select all columns from sepal.length to petal.length
selected2 <- select(iris, Sepal.Length:Petal.Length)
head(selected, 3)
```


```{r}
#/ code-fold: true
#/ code-summary: "Show the code"
# check if identical 
identical(selected, selected2)
```
```{r}
#Mutation

# create a new column that stores logical values for sepal.width greater than half of sepal.length
newCol <- mutate(iris, greater.half = Sepal.Width > 0.5 * Sepal.Length)
tail(newCol)
```



```{r}
#/ code-fold: true
#/ code-summary: "Show the code"
#Other functions

# arrange()
newCol <- arrange(newCol, Petal.Width)
head(newCol)
```


```{r}
#/ code-fold: true
#/ code-summary: "Show the code"

# The chain operator, or the pipeline %>%
# This will first filter, and then arrange our data. Note that here the order in which you call functions does not matter, but in other cases it might
arr.virg <- newCol %>% filter(Species == "virginica") %>%
  arrange(Sepal.Width)
arr.virg[30:35,] # will show us rows 30 through 35 and all columns
```


```{r}
#/ code-fold: true
#/ code-summary: "Show the code"

# You can also arrange in descending order using desc() on what you arrange by
# arrange(desc(sepal.width))
# summarise()
summarise(arr.virg, mean.length = mean(Sepal.Length, na.rm = TRUE))
```


```{r}
#/ code-fold: true
#/ code-summary: "Show the code"

#Visualization
plot(iris)
```
```{r}
plot(iris$Sepal.Width, iris$Sepal.Length)
```

```{r}
#/ code-fold: true
#/ code-summary: "Show the code"

hist(iris$Sepal.Length)
```

::: {.callout-tip appearance="simple"}

The summary() function gives summary statistics for any dataset. It can also be called on one variable instead of on the whole dataset. Try summary(iris$Sepal.Length) and compare that with the above summaries.

Alternatively, you may only want to know the column names of your dataset, in which case you can use names(NameOfdataset), which in our case would look like names(iris). Also notice that each coloumn name in the iris dataset has some upper case letters, which might be inconvenient to work with. You can then call the tolower() function on names(iris) to make this change. For those who might prefer upper case column names, the toupper() function will instead, be useful.

Written packages make it easier to work with datasets than regular baseR functions. They have been optimized to be faster and more intuitive than baseR functions, therefore reducing the steepness of the R learning curve. Letâ€™s take a look;

:::
